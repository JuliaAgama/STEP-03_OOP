/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n;\n\n(function () {\n  // Общий клсс\n  var Visit = function Visit(reason, date, name) {\n    _classCallCheck(this, Visit);\n\n    this.reason = reason;\n    this.date = date;\n    this.name = name;\n  };\n\n  var Cardiologist =\n  /*#__PURE__*/\n  function (_Visit) {\n    _inherits(Cardiologist, _Visit);\n\n    function Cardiologist(_ref) {\n      var _this;\n\n      var reason = _ref.reason,\n          date = _ref.date,\n          name = _ref.name,\n          other = _objectWithoutProperties(_ref, [\"reason\", \"date\", \"name\"]);\n\n      _classCallCheck(this, Cardiologist);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Cardiologist).call(this, reason, date, name));\n\n      for (var i in other) {\n        _this[i] = other[i];\n      }\n\n      return _this;\n    }\n\n    return Cardiologist;\n  }(Visit);\n\n  var Dentist =\n  /*#__PURE__*/\n  function (_Visit2) {\n    _inherits(Dentist, _Visit2);\n\n    function Dentist(_ref2) {\n      var _this2;\n\n      var reason = _ref2.reason,\n          date = _ref2.date,\n          name = _ref2.name,\n          other = _objectWithoutProperties(_ref2, [\"reason\", \"date\", \"name\"]);\n\n      _classCallCheck(this, Dentist);\n\n      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Dentist).call(this, reason, date, name));\n\n      for (var i in other) {\n        _this2[i] = other[i];\n      }\n\n      return _this2;\n    }\n\n    return Dentist;\n  }(Visit);\n\n  var Therapist =\n  /*#__PURE__*/\n  function (_Visit3) {\n    _inherits(Therapist, _Visit3);\n\n    function Therapist(_ref3) {\n      var _this3;\n\n      var reason = _ref3.reason,\n          date = _ref3.date,\n          name = _ref3.name,\n          other = _objectWithoutProperties(_ref3, [\"reason\", \"date\", \"name\"]);\n\n      _classCallCheck(this, Therapist);\n\n      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Therapist).call(this, reason, date, name));\n\n      for (var i in other) {\n        _this3[i] = other[i];\n      }\n\n      return _this3;\n    }\n\n    return Therapist;\n  }(Visit); // Получение списка докторов с их полями с БД\n\n\n  var doctors = getDoctors();\n  var createVisit = document.getElementById('header-btn'),\n      modalCard = document.getElementById('modal-card'),\n      modalCardClose = document.getElementById('modal-card-close'),\n      selectDoctor = document.getElementById('select-doctor'),\n      inputComment = document.getElementById('input-comment'),\n      inputCommon = document.querySelector('.input-box__common'),\n      inputDate = document.getElementById('input-date'),\n      submitModal = document.getElementById('submit-btn__modal'),\n      cardsContainer = document.getElementById('cards-container'),\n      DEFAULT_GUTTER = 20; // Открытые модалки\n\n  createVisit.addEventListener('click', function (e) {\n    e.stopPropagation();\n    resetInput(modalCard.getAttribute('id'));\n    modalCard.classList.remove('modal-card--hide');\n  }); // Закрытие модалки по кнопке\n\n  modalCardClose.addEventListener('click', function (e) {\n    e.stopPropagation();\n    modalCard.classList.add('modal-card--hide');\n  }); // Закрытие модалки по клику в не окна\n\n  document.body.addEventListener('click', function (e) {\n    var modalCardHide = document.querySelector('.modal-card--hide');\n\n    if (modalCardHide === null) {\n      if (findAncestor(e.target, 'modal-card') === null) {\n        modalCard.classList.add('modal-card--hide');\n      }\n    }\n  }); // Хелпер для поиск родительских елементов по айди.\n\n  function findAncestor(el, id) {\n    while ((el = el.parentElement) && el.id !== id) {\n      ;\n    }\n\n    return el;\n  } // Наполнение селекта докторов и полей с БД\n\n\n  doctors.forEach(function (e) {\n    // Селекты\n    var wrapperOption = document.createElement('div');\n    wrapperOption.innerHTML = \"<option \\n                                            value=\\\"\".concat(e.type, \"\\\" \\n                                            data-id=\\\"type\\\" \\n                                            class=\\\"select-doctor__option\\\">\").concat(e.type, \"\\n                                        </option>\");\n    selectDoctor.appendChild(wrapperOption.firstElementChild); // Поля к заполеннию\n\n    var wrapperDiv = document.createElement('div');\n    wrapperDiv.innerHTML = \"<div \\n                                        class=\\\"input-box input-box__special input-box__special--hide\\\"\\n                                        id=\\\"input-box__\".concat(e.type, \"\\\"\\n                                    >\");\n    e.fields.forEach(function (ev) {\n      var wrapperInput = document.createElement('div');\n      wrapperInput.innerHTML = \"<input \\n                                            class=\\\"input-field\\\" \\n                                            type=\\\"\".concat(ev.type, \"\\\" \\n                                            placeholder=\\\"\").concat(ev.type !== 'date' ? ev.name : '', \"\\\" \\n                                            data-name=\\\"\").concat(ev.name, \"\\\"\\n                                            data-id=\\\"\").concat(ev.id, \"\\\" \\n                                            \").concat(ev.required ? 'data-required=\"true\"' : null, \"\\n                                        >\");\n      wrapperDiv.firstElementChild.appendChild(wrapperInput.firstElementChild);\n    });\n    inputComment.before(wrapperDiv.children[0]);\n  }); // Выбор врача и отображение полей\n\n  selectDoctor.addEventListener('change', function (e) {\n    inputCommon.classList.remove('input-box__common--hide');\n    inputComment.classList.remove('input-comment--hide');\n    submitModal.classList.remove('submit-btn--hide');\n    var lastSelect = document.querySelector('.input-box__special:not(.input-box__special--hide)');\n    if (lastSelect) lastSelect.classList.add('input-box__special--hide');\n    document.getElementById(\"input-box__\".concat(this.value)).classList.remove('input-box__special--hide');\n  }); // Создание карточки\n\n  function createCards() {\n    console.log('create cards');\n    var lastIndexCards = 0;\n    return function (_ref4) {\n      var name = _ref4.name,\n          type = _ref4.type,\n          reason = _ref4.reason,\n          other = _objectWithoutProperties(_ref4, [\"name\", \"type\", \"reason\"]);\n\n      lastIndexCards++;\n      var str = '';\n\n      for (var i in other) {\n        var nameVal = document.querySelector(\"[data-id=\".concat(i, \"]\")).getAttribute('data-name');\n        str += \"<p>\".concat(nameVal, \": <span>\").concat(other[i], \"</span></p>\");\n      }\n\n      var wrapperDiv = document.createElement('div');\n      var cartGutter = lastIndexCards * DEFAULT_GUTTER + DEFAULT_GUTTER;\n      wrapperDiv.innerHTML = \"\\n                <div class=\\\"record-card\\\" draggable=\\\"true\\\" id=\\\"record-card_\".concat(lastIndexCards, \"\\\" data-index=\\\"\").concat(lastIndexCards, \"\\\" style=\\\"left: \").concat(cartGutter, \"px; top: \").concat(cartGutter, \"px; z-index: \").concat(lastIndexCards, \"\\\">\\n                    <div class=\\\"close-btn record-card__close\\\">\\n                        <i class=\\\"fas fa-trash-alt\\\"></i>\\n                    </div>\\n    \\n                    <div class=\\\"record-card__main-text\\\">\\n                        <p id=\\\"patient-name\\\">\").concat(name, \"</p>\\n                        <p id=\\\"doctor-selected\\\">\").concat(type, \"</p>\\n                    </div>\\n    \\n                    <div class=\\\"record-card__extended-text\\\">\\n                        <p id=\\\"reason\\\">Problem: <span>\").concat(reason, \"</span></p>\\n    \\n                        <div class=\\\"record-card__special hidden\\\" id=record-card__\").concat(type, \">\\n                         \").concat(str, \"\\n                        </div>\\n                    </div>\\n                        \\n                    <div class=\\\"record-card__more-less\\\">\\n                        <p class=\\\"record-card__more-less--more\\\" id=\\\"show-more-card\\\">show more</p>\\n                    </div>\\n                </div>\");\n      var card = cardsContainer.appendChild(wrapperDiv.firstElementChild);\n      card.querySelector('.fa-trash-alt').addEventListener('click', function () {\n        recordCard.parentNode.removeChild(recordCard);\n      });\n      var recordCard = document.getElementById(\"record-card_\".concat(lastIndexCards));\n      var dragArea = document.getElementById('cards-container');\n      var offsetX;\n      var offsetY;\n      recordCard.addEventListener('mousedown', function (e) {\n        var element = e.target;\n\n        if (element) {\n          element.style.zIndex = '999';\n        }\n      });\n      recordCard.addEventListener('mouseup', function (e) {\n        var element = e.target;\n\n        if (element) {\n          element.style.zIndex = element.getAttribute('data-index');\n        }\n      });\n      recordCard.addEventListener('dragstart', function (e) {\n        var element = e.target;\n\n        if (element) {\n          offsetX = e.offsetX;\n          offsetY = e.offsetY;\n        }\n      });\n      recordCard.addEventListener('drag', function (e) {\n        if (e.pageY < dragArea.offsetTop + offsetY || e.pageX < dragArea.offsetLeft + offsetX) {\n          recordCard.style.borderColor = \"red\";\n        } else {\n          recordCard.style.borderColor = \"#3fafbc\";\n        }\n      });\n      recordCard.addEventListener('dragend', function (e) {\n        recordCard.style.borderColor = \"#3fafbc\";\n\n        if (e.pageY < dragArea.offsetTop + offsetY || e.pageX < dragArea.offsetLeft + offsetX) {\n          console.log('can not drag there');\n        } else {\n          this.style.top = e.pageY - dragArea.offsetTop - offsetY + 'px';\n          this.style.left = e.pageX - dragArea.offsetLeft - offsetX + 'px';\n        }\n      }); // Показ и скрытие доп полей\n\n      var showMore = card.querySelector(\"#show-more-card\");\n      var showMoreSection = card.querySelector(\"#record-card__\".concat(type));\n      showMore.addEventListener('click', function (e) {\n        var curr = this.innerText.toLowerCase();\n        this.innerText = \"\".concat(curr === 'show more' ? 'show less' : 'show more');\n        showMoreSection.classList.toggle('hidden');\n      });\n    };\n  }\n\n  var createCard = createCards(); // Отображение сохраненных карточек\n\n  ;\n\n  (function () {\n    var currentCards = window.localStorage.getItem('ClientCard');\n\n    if (currentCards) {\n      document.querySelector('.cards-container__empty').remove('cards-container__empty--hide');\n      var arr = JSON.parse(currentCards);\n      arr.forEach(function (e) {\n        return createCard(e);\n      });\n    }\n  })(); // Проверка заполенных полей\n\n\n  function checkRequired(idEl) {\n    var resCheck = true;\n    var arrCheck = document.querySelectorAll(\"#\".concat(idEl, \" [data-required=\\\"true\\\"]\"));\n    arrCheck.forEach(function (e) {\n      e.classList.remove('err-field');\n\n      if (e.parentElement.classList.value.indexOf('hide') < 0) {\n        if (e.value.length === 0) {\n          resCheck = false;\n          e.classList.add('err-field');\n        }\n      }\n    });\n    return resCheck;\n  } // Получение всех обязательно заполненных полей\n\n\n  function getAllInputForm(idEl) {\n    resObj = {};\n    var arrInp = document.querySelectorAll(\"#\".concat(idEl, \" [data-required=\\\"true\\\"]\"));\n    arrInp.forEach(function (e) {\n      if (e.parentElement.classList.value.indexOf('hide') < 0) {\n        if (e.tagName === 'SELECT') {\n          var el = e.options[e.options.selectedIndex];\n          resObj[el.getAttribute('data-id')] = el.value;\n        } else {\n          resObj[e.getAttribute('data-id')] = e.value;\n        }\n      }\n    });\n    return resObj;\n  } // Стирание всех инпутов\n\n\n  function resetInput(idEl) {\n    var arrInp = document.querySelectorAll(\"#\".concat(idEl, \" .input-field\"));\n    arrInp.forEach(function (e) {\n      e.value = \"\";\n      e.classList.remove('err-field');\n    });\n  } // Сохранение карточек в localStorage\n\n\n  function setCardStorage(obj) {\n    var currentCards = window.localStorage.getItem('ClientCard');\n    var allCards = currentCards ? JSON.parse(currentCards) : [];\n    allCards.push(obj);\n    window.localStorage.setItem('ClientCard', JSON.stringify(allCards));\n  } // Сабмит формы карточки\n\n\n  submitModal.addEventListener('click', function (e) {\n    e.preventDefault();\n    var idForm = this.parentElement.getAttribute('id');\n\n    if (checkRequired(idForm)) {\n      var type = selectDoctor.value;\n      var comment = document.getElementById('input-comment');\n      var allInp = getAllInputForm(idForm);\n      allInp[comment.getAttribute('data-id')] = comment.value;\n      createCard(allInp);\n      var infoHasCards = document.querySelector('.cards-container__empty');\n      infoHasCards ? infoHasCards.remove('cards-container__empty--hide') : null;\n\n      if (type === 'cardiologist') {\n        setCardStorage(new Cardiologist(allInp));\n      } else if (type === 'dentist') {\n        setCardStorage(new Dentist(allInp));\n      } else if (type === 'therapist') {\n        setCardStorage(new Therapist(allInp));\n      }\n\n      modalCard.classList.add('modal-card--hide');\n    }\n  });\n})();\n\nfunction getDoctors() {\n  return [{\n    type: \"cardiologist\",\n    fields: [{\n      name: \"Normal pressure\",\n      type: \"text\",\n      id: \"pressure\",\n      required: true\n    }, {\n      name: \"Body mass index\",\n      type: \"text\",\n      id: \"massIndex\",\n      required: true\n    }, {\n      name: \"Past diseases of the cardiovascular system\",\n      type: \"text\",\n      id: \"pastDiseases\",\n      required: true\n    }, {\n      name: \"Age\",\n      type: \"text\",\n      id: \"age\",\n      required: true\n    }]\n  }, {\n    type: \"dentist\",\n    fields: [{\n      name: \"Date last visited\",\n      type: \"text\",\n      id: \"lastVisited\",\n      required: true\n    }]\n  }, {\n    type: \"therapist\",\n    fields: [{\n      name: \"Age\",\n      type: \"text\",\n      id: \"age\",\n      required: true\n    }]\n  }];\n}\n\n;\n/********** FOOTER **********/\n// При клике на лого в футере - плавно прокручивать страницу вверх.\n\ndocument.getElementById('footer-logo').addEventListener('click', scrollToTop);\n\nfunction scrollToTop() {\n  if (window.scrollY != 0) {\n    setTimeout(function () {\n      window.scrollTo(0, window.scrollY - 30);\n      scrollToTop();\n    }, 100);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/script.js\n");

/***/ })

/******/ });